# Calculate empirical means for each term and quality
empirical_means <- df_minus %>%
group_by(term, quality) %>%
summarize(mean_estimate = mean(estimate), .groups = "drop")
empirical_means
# Define custom colors for vertical lines (ensuring clear distinction)
vline_colors <- c(
"Theoretical Mean" = "black",
"Empirical Mean: High Quality" = "#D55E00",  # Distinct orange
"Empirical Mean: Low Quality" = "#009E73"    # Distinct green
)
# Create the combined plot with legend
combined_plot_minus <- ggplot(df, aes(x = estimate, fill = quality)) +
geom_histogram(alpha = 0.4, position = "identity", bins = 30, color = "black") +
# Theoretical Mean Lines
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
# Empirical Mean Lines (High Quality)
geom_vline(data = empirical_means %>% filter(quality == "high"),
aes(xintercept = mean_estimate, color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
# Empirical Mean Lines (Low Quality)
geom_vline(data = empirical_means %>% filter(quality == "low"),
aes(xintercept = mean_estimate, color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
scale_fill_manual(name = "Imputation Quality", values = c("high" = "red", "low" = "blue")) +
scale_color_manual(name = "Vertical Lines", values = vline_colors, guide = guide_legend(override.aes = list(
linetype = "solid",   # Solid lines in legend
linewidth = 2,        # Thicker for visibility
size = .6  # Custom height of short lines
))) +
facet_wrap(~ term, scales = "free") +
labs(title = "Combined Histogram for g1_wgs ~ g1_imp", x = "Estimate", y = "Frequency") +
theme_minimal() +
theme(
legend.position = "right",
legend.spacing.y = unit(20, "pt"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.box = "vertical"
)
combined_plot_minus
combined_plot_minus
high_plot_minus <- ggplot(df %>% filter(quality == "high"), aes(x = estimate)) +
geom_histogram(fill = "red", alpha = 0.4, bins = 30, color = "black") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = empirical_means %>% filter(term == "(Intercept)", quality == "high") %>% pull(mean_estimate), color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = empirical_means %>% filter(term == "g1_imp", quality == "high") %>% pull(mean_estimate), color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
labs(title = "High Quality Estimates for Minus Models", x = "Estimate", y = "Frequency") +
facet_wrap(~ term, scales = "free") +
scale_color_manual(name = "Vertical Lines", values = vline_colors) +
theme_minimal() +
theme(legend.position = "none")  # Remove redundant legends
low_plot_minus <- ggplot(df %>% filter(quality == "low"), aes(x = estimate)) +
geom_histogram(fill = "blue", alpha = 0.4, bins = 30, color = "black") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = empirical_means %>% filter(term == "(Intercept)", quality == "low") %>% pull(mean_estimate), color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = empirical_means %>% filter(term == "g1_imp", quality == "low") %>% pull(mean_estimate), color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
labs(title = "Low Quality Estimates for Minus Models", x = "Estimate", y = "Frequency") +
facet_wrap(~ term, scales = "free") +
scale_color_manual(name = "Vertical Lines", values = vline_colors) +
theme_minimal() +
theme(legend.position = "none")  # Remove redundant legends
# Arrange the plots in a 3-row layout
final_plot_minus <- combined_plot_minus / high_plot_minus / low_plot_minus +
plot_layout(guides = "collect")  # Keep the legend only for the first plot
# Display the final plot
print(final_plot_minus)
# Save the final plot
ggsave(glue("{simple_reg_coefs_dir}/coefs_histograms.png"), plot = final_plot_minus, width = 12, height = 12, dpi = 300)
# Calculate empirical means for each term and quality
empirical_means <- df_minus %>%
group_by(term, quality) %>%
summarize(mean_estimate = mean(estimate), .groups = "drop")
empirical_means
# Define custom colors for vertical lines (ensuring clear distinction)
vline_colors <- c(
"Theoretical Mean" = "black",
"Empirical Mean: High Quality" = "#D55E00",  # Distinct orange
"Empirical Mean: Low Quality" = "#009E73"    # Distinct green
)
# Create the combined plot with legend
combined_plot_minus <- ggplot(df, aes(x = estimate, fill = quality)) +
geom_histogram(alpha = 0.4, position = "identity", bins = 30, color = "black") +
# Theoretical Mean Lines
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
# Empirical Mean Lines (High Quality)
geom_vline(data = empirical_means %>% filter(quality == "high"),
aes(xintercept = mean_estimate, color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
# Empirical Mean Lines (Low Quality)
geom_vline(data = empirical_means %>% filter(quality == "low"),
aes(xintercept = mean_estimate, color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
scale_fill_manual(name = "Imputation Quality", values = c("high" = "red", "low" = "blue")) +
scale_color_manual(name = "Vertical Lines", values = vline_colors, guide = guide_legend(override.aes = list(
linetype = "solid",   # Solid lines in legend
linewidth = 2,        # Thicker for visibility
size = .6  # Custom height of short lines
))) +
facet_wrap(~ term, scales = "free") +
labs(title = "Combined Histogram for g1_wgs ~ g1_imp", x = "Estimate", y = "Frequency") +
theme_minimal() +
theme(
legend.position = "right",
legend.spacing.y = unit(20, "pt"),
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
legend.box = "vertical"
)
combined_plot_minus
high_plot_minus <- ggplot(df %>% filter(quality == "high"), aes(x = estimate)) +
geom_histogram(fill = "red", alpha = 0.4, bins = 30, color = "black") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = empirical_means %>% filter(term == "(Intercept)", quality == "high") %>% pull(mean_estimate), color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = empirical_means %>% filter(term == "g1_imp", quality == "high") %>% pull(mean_estimate), color = "Empirical Mean: High Quality"), linewidth = 0.8, linetype = "dashed") +
labs(title = "High Quality Estimates", x = "Estimate", y = "Frequency") +
facet_wrap(~ term, scales = "free") +
scale_color_manual(name = "Vertical Lines", values = vline_colors) +
theme_minimal() +
theme(legend.position = "none")  # Remove redundant legends
low_plot_minus <- ggplot(df %>% filter(quality == "low"), aes(x = estimate)) +
geom_histogram(fill = "blue", alpha = 0.4, bins = 30, color = "black") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = 0, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df, term == "(Intercept)"),
aes(xintercept = empirical_means %>% filter(term == "(Intercept)", quality == "low") %>% pull(mean_estimate), color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = 1, color = "Theoretical Mean"), linewidth = 0.8, linetype = "dashed") +
geom_vline(data = subset(df_minus, term == "g1_imp"),
aes(xintercept = empirical_means %>% filter(term == "g1_imp", quality == "low") %>% pull(mean_estimate), color = "Empirical Mean: Low Quality"), linewidth = 0.8, linetype = "dashed") +
labs(title = "Low Quality Estimates", x = "Estimate", y = "Frequency") +
facet_wrap(~ term, scales = "free") +
scale_color_manual(name = "Vertical Lines", values = vline_colors) +
theme_minimal() +
theme(legend.position = "none")  # Remove redundant legends
# Arrange the plots in a 3-row layout
final_plot_minus <- combined_plot_minus / high_plot_minus / low_plot_minus +
plot_layout(guides = "collect")  # Keep the legend only for the first plot
# Display the final plot
print(final_plot_minus)
# Save the final plot
ggsave(glue("{simple_reg_coefs_dir}/coefs_histograms.png"), plot = final_plot_minus, width = 12, height = 12, dpi = 300)
list.of.packages <- c("data.table", "dplyr", "magrittr", "tidyverse", "plinkFile", "genio", "arrow", "broom", "glue", "sjPlot", "writexl", "readxl", "gt", "ggplot2", "patchwork", "cowplot")
lapply(list.of.packages, library, character.only = TRUE)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
list.of.packages <- c("data.table", "dplyr", "magrittr", "tidyverse", "plinkFile", "genio", "arrow", "broom", "glue", "sjPlot", "writexl", "readxl", "gt", "ggplot2", "patchwork", "cowplot")
lapply(list.of.packages, library, character.only = TRUE)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
library(dplyr)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
# Filter for plus models
plus_models <- df %>% filter(model_name == "plus")
# Compute mean and variance of t-statistics
mean_t_stat <- mean(plus_models$statistic, na.rm = TRUE)
var_t_stat <- var(plus_models$statistic, na.rm = TRUE)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
library(dplyr)
library(gt)
library(ggplot2)
library(gridExtra)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
plus_models <- df %>% filter(model_name == "plus")
mean_t_stat_all <- mean(plus_models$statistic, na.rm = TRUE)
var_t_stat_all <- var(plus_models$statistic, na.rm = TRUE)
mean_t_stat_low <- mean(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
var_t_stat_low <- var(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
mean_t_stat_high <- mean(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
var_t_stat_high <- var(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
# Create a summary table
summary_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Mean_T_Stat = c(mean_t_stat_all, mean_t_stat_low, mean_t_stat_high),
Variance_T_Stat = c(var_t_stat_all, var_t_stat_low, var_t_stat_high)
)
# Save table as PNG
gt(summary_table) %>%
gtsave(glue("{models_coefs_t_stat}/t_stat_summary.png"))
# Compute sum of squared t-statistics
chi_sq_all <- sum(plus_models$statistic^2, na.rm = TRUE)
chi_sq_low <- sum((plus_models %>% filter(quality == "low"))$statistic^2, na.rm = TRUE)
chi_sq_high <- sum((plus_models %>% filter(quality == "high"))$statistic^2, na.rm = TRUE)
# Get counts of SNPs for degrees of freedom
N_all <- plus_models %>% nrow()
N_low <- plus_models %>% filter(quality == "low") %>% nrow()
N_high <- plus_models %>% filter(quality == "high") %>% nrow()
# Perform chi-square tests
p_value_all <- pchisq(chi_sq_all, df = N_all, lower.tail = FALSE)
p_value_low <- pchisq(chi_sq_low, df = N_low, lower.tail = FALSE)
p_value_high <- pchisq(chi_sq_high, df = N_high, lower.tail = FALSE)
# Create chi-square results table
chi_sq_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Chi_Sq_Stat = c(chi_sq_all, chi_sq_low, chi_sq_high),
DF = c(N_all, N_low, N_high),
P_Value = c(p_value_all, p_value_low, p_value_high)
)
# Save chi-square table as PNG
gt(chi_sq_table) %>%
gtsave("{models_coefs_t_stat}/chi_sq_results.png")
# Save chi-square table as PNG
gt(chi_sq_table) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("Chi_Sq_Stat"), decimals = 5) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
library(dplyr)
library(gt)
library(ggplot2)
library(gridExtra)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models >%> filter(term == "g1_minus_g2_imp")
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
mean_t_stat_all <- mean(plus_models$statistic, na.rm = TRUE)
var_t_stat_all <- var(plus_models$statistic, na.rm = TRUE)
mean_t_stat_low <- mean(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
var_t_stat_low <- var(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
mean_t_stat_high <- mean(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
var_t_stat_high <- var(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
# Create a summary table
summary_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Mean_T_Stat = c(mean_t_stat_all, mean_t_stat_low, mean_t_stat_high),
Variance_T_Stat = c(var_t_stat_all, var_t_stat_low, var_t_stat_high)
)
# Save table as PNG
gt(summary_table) %>%
gtsave(glue("{models_coefs_t_stat}/t_stat_summary.png"))
# Compute sum of squared t-statistics
chi_sq_all <- sum(plus_models$statistic^2, na.rm = TRUE)
chi_sq_low <- sum((plus_models %>% filter(quality == "low"))$statistic^2, na.rm = TRUE)
chi_sq_high <- sum((plus_models %>% filter(quality == "high"))$statistic^2, na.rm = TRUE)
# Get counts of SNPs for degrees of freedom
N_all <- plus_models %>% nrow()
N_low <- plus_models %>% filter(quality == "low") %>% nrow()
N_high <- plus_models %>% filter(quality == "high") %>% nrow()
# Perform chi-square tests
p_value_all <- pchisq(chi_sq_all, df = N_all, lower.tail = FALSE)
p_value_low <- pchisq(chi_sq_low, df = N_low, lower.tail = FALSE)
p_value_high <- pchisq(chi_sq_high, df = N_high, lower.tail = FALSE)
# Create chi-square results table
chi_sq_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Chi_Sq_Stat = c(chi_sq_all, chi_sq_low, chi_sq_high),
DF = c(N_all, N_low, N_high),
P_Value = c(p_value_all, p_value_low, p_value_high)
)
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
mean_t_stat_all <- mean(plus_models$statistic, na.rm = TRUE)
var_t_stat_all <- var(plus_models$statistic, na.rm = TRUE)
mean_t_stat_low <- mean(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
var_t_stat_low <- var(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
mean_t_stat_high <- mean(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
var_t_stat_high <- var(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
# Create a summary table
summary_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Mean_T_Stat = c(mean_t_stat_all, mean_t_stat_low, mean_t_stat_high),
Variance_T_Stat = c(var_t_stat_all, var_t_stat_low, var_t_stat_high)
)
# Save table as PNG
gt(summary_table) %>%
gtsave(glue("{models_coefs_t_stat}/t_stat_summary.png"))
# Compute sum of squared t-statistics
chi_sq_all <- sum(plus_models$statistic^2, na.rm = TRUE)
chi_sq_low <- sum((plus_models %>% filter(quality == "low"))$statistic^2, na.rm = TRUE)
chi_sq_high <- sum((plus_models %>% filter(quality == "high"))$statistic^2, na.rm = TRUE)
# Get counts of SNPs for degrees of freedom
N_all <- plus_models %>% nrow()
N_low <- plus_models %>% filter(quality == "low") %>% nrow()
N_high <- plus_models %>% filter(quality == "high") %>% nrow()
# Perform chi-square tests
p_value_all <- pchisq(chi_sq_all, df = N_all, lower.tail = FALSE)
p_value_low <- pchisq(chi_sq_low, df = N_low, lower.tail = FALSE)
p_value_high <- pchisq(chi_sq_high, df = N_high, lower.tail = FALSE)
# Create chi-square results table
chi_sq_table <- tibble(
Group = c("All", "Low Quality", "High Quality"),
Chi_Sq_Stat = c(chi_sq_all, chi_sq_low, chi_sq_high),
DF = c(N_all, N_low, N_high),
P_Value = c(p_value_all, p_value_low, p_value_high)
)
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
models_coefs_dir <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients"
models_coefs_t_stat <- "/Users/mmir/Library/CloudStorage/Dropbox/git/250115_CSF_A21_WGS_imp_200_SNPS/out/models_coefficients_t_stats"
df <- read_excel(glue("{models_coefs_dir}/models_coefficients.xlsx"))
head(df)
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
mean_t_stat_low <- mean(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
var_t_stat_low <- var(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
mean_t_stat_high <- mean(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
var_t_stat_high <- var(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
# Create a summary table
summary_table <- tibble(
Group = c("Low Quality", "High Quality"),
Mean_T_Stat = c(mean_t_stat_low, mean_t_stat_high),
Variance_T_Stat = c(var_t_stat_low, var_t_stat_high)
)
# Save table as PNG
gt(summary_table) %>%
gtsave(glue("{models_coefs_t_stat}/t_stat_summary.png"))
# Compute sum of squared t-statistics
chi_sq_low <- sum((plus_models %>% filter(quality == "low"))$statistic^2, na.rm = TRUE)
chi_sq_high <- sum((plus_models %>% filter(quality == "high"))$statistic^2, na.rm = TRUE)
# Get counts of SNPs for degrees of freedom
N_low <- plus_models %>% filter(quality == "low") %>% nrow()
N_high <- plus_models %>% filter(quality == "high") %>% nrow()
# Perform chi-square tests
p_value_low <- pchisq(chi_sq_low, df = N_low, lower.tail = FALSE)
p_value_high <- pchisq(chi_sq_high, df = N_high, lower.tail = FALSE)
# Create chi-square results table
chi_sq_table <- tibble(
Group = c("Low Quality", "High Quality"),
Chi_Sq_Stat = c(chi_sq_low, chi_sq_high),
DF = c(N_low, N_high),
P_Value = c(p_value_low, p_value_high)
)
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
mean_t_stat_low <- mean(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
var_t_stat_low <- var(plus_models %>% filter(quality == "low") %>% pull(statistic), na.rm = TRUE)
mean_t_stat_high <- mean(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
var_t_stat_high <- var(plus_models %>% filter(quality == "high") %>% pull(statistic), na.rm = TRUE)
# Create a summary table
summary_table <- tibble(
Group = c("Low Quality", "High Quality"),
Mean_T_Stat = c(mean_t_stat_low, mean_t_stat_high),
Variance_T_Stat = c(var_t_stat_low, var_t_stat_high)
)
# Save table as PNG
gt(summary_table) %>%
gtsave(glue("{models_coefs_t_stat}/t_stat_summary.png"))
# Compute sum of squared t-statistics
chi_sq_low <- sum((plus_models %>% filter(quality == "low"))$statistic^2, na.rm = TRUE)
chi_sq_high <- sum((plus_models %>% filter(quality == "high"))$statistic^2, na.rm = TRUE)
# Get counts of SNPs for degrees of freedom
N_low <- plus_models %>% filter(quality == "low") %>% nrow()
N_high <- plus_models %>% filter(quality == "high") %>% nrow()
# Perform chi-square tests
p_value_low <- pchisq(chi_sq_low, df = N_low, lower.tail = FALSE)
p_value_high <- pchisq(chi_sq_high, df = N_high, lower.tail = FALSE)
# Create chi-square results table
chi_sq_table <- tibble(
Group = c("Low Quality", "High Quality"),
Chi_Sq_Stat = c(chi_sq_low, chi_sq_high),
DF = c(N_low, N_high),
P_Value = c(p_value_low, p_value_high)
)
# Save chi-square table as PNG
gt(chi_sq_table) %>%
fmt_number(columns = c("P_Value"), decimals = 5) %>%
gtsave(glue("{models_coefs_t_stat}/chi_sq_results.png"))
# Create a histogram of t-statistics for low and high quality
histogram_low <- ggplot(plus_models %>% filter(quality == "low"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7) +
labs(title = "Histogram of T-Statistics (Low Quality)", x = "T-Statistic", y = "Frequency") +
theme_minimal()
histogram_high <- ggplot(plus_models %>% filter(quality == "high"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7) +
labs(title = "Histogram of T-Statistics (High Quality)", x = "T-Statistic", y = "Frequency") +
theme_minimal()
# Save histograms as PNG
ggsave(glue("{models_coefs_t_stat}/histogram_low_quality.png"), histogram_low, width = 8, height = 6)
# Create histograms
histogram_low <- ggplot(plus_models %>% filter(quality == "low"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7, color = "black") +
labs(title = "Low-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
histogram_high <- ggplot(plus_models %>% filter(quality == "high"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7, color = "black") +
labs(title = "High-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
# Combine the plots into one figure with two subplots
combined_plot <- histogram_low / histogram_high +
plot_annotation(title = "Histograms of T-Statistics by Model Quality")
# Save the combined plot
ggsave(glue("{models_coefs_t_stat}/histograms_combined.png"), combined_plot, width = 8, height = 10)
# Create histograms
histogram_high <- ggplot(plus_models %>% filter(quality == "high"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7, color = "black") +
labs(title = "High-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
histogram_low <- ggplot(plus_models %>% filter(quality == "low"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7, color = "black") +
labs(title = "Low-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
# Combine the plots into one figure with two subplots
combined_plot <- histogram_high / histogram_low +
plot_annotation(title = "Histograms of T-Statistics by Model Quality")
# Save the combined plot
ggsave(glue("{models_coefs_t_stat}/histograms_combined.png"), combined_plot, width = 8, height = 10)
plus_models <- df %>% filter(model_name == "plus")
plus_models <- plus_models %>% filter(term == "g1_minus_g2_imp")
head(plus_models)
# Create histograms
histogram_high <- ggplot(plus_models %>% filter(quality == "high"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "red", alpha = 0.7, color = "black") +
labs(title = "High-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
histogram_low <- ggplot(plus_models %>% filter(quality == "low"), aes(x = statistic)) +
geom_histogram(binwidth = 0.5, fill = "blue", alpha = 0.7, color = "black") +
labs(title = "Low-Quality Models", x = "T-Statistic", y = "Frequency") +
theme_minimal()
# Combine the plots into one figure with two subplots
combined_plot <- histogram_high / histogram_low +
plot_annotation(title = "Histograms of T-Statistics by Model Quality")
# Save the combined plot
ggsave(glue("{models_coefs_t_stat}/histograms_combined.png"), combined_plot, width = 8, height = 10)
library(ggplot2)
library(dplyr)
library(patchwork)
# Create a single histogram with facets
histogram_combined <- ggplot(plus_models, aes(x = statistic, fill = quality)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, color = "black", position = "identity") +
scale_fill_manual(values = c("low" = "blue", "high" = "red"), name = "Model Quality") +
facet_wrap(~quality, ncol = 1, scales = "free_y") +
labs(title = "Histograms of T-Statistics by Model Quality",
x = "T-Statistic", y = "Frequency") +
theme_minimal() +
theme(legend.position = "bottom")  # Move legend to bottom center
# Save the combined plot
ggsave(glue("{models_coefs_t_stat}/histograms_combined.png"), histogram_combined, width = 8, height = 10)
histogram_combined
# Create a single histogram with facets
histogram_combined <- ggplot(plus_models, aes(x = statistic, fill = quality)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, color = "black", position = "identity") +
scale_fill_manual(values = c("low" = "blue", "high" = "red"), name = "Model Quality") +
facet_wrap(~quality, ncol = 1, scales = "free_y") +
labs(title = "Histograms of T-Statistics by Model Quality",
x = "T-Statistic", y = "Frequency") +
theme_minimal() +
theme(legend.position = "right")  # Move legend to bottom center
histogram_combined
# Create a single histogram with facets
histogram_combined <- ggplot(plus_models, aes(x = statistic, fill = quality)) +
geom_histogram(binwidth = 0.5, alpha = 0.7, color = "black", position = "identity") +
scale_fill_manual(values = c("low" = "blue", "high" = "red"), name = "SNP Quality") +
facet_wrap(~quality, ncol = 1, scales = "free_y") +
labs(title = "Histograms of T-Statistics by Model Quality",
x = "T-Statistic", y = "Frequency") +
theme_minimal() +
theme(legend.position = "right")  # Move legend to bottom center
histogram_combined
# Save the combined plot
ggsave(glue("{models_coefs_t_stat}/histograms_combined.png"), histogram_combined, width = 8, height = 10)
